//Build the Stack class
class Stack<T> {
  List<T> _items = [];

  // Push an item onto the stack
  void push(T item) {
    _items.add(item);
  }

  // Pop an item from the stack
  T pop() {
    if (isEmpty) {
      throw StateError('Stack is empty!');
    }
    return _items.removeLast();
  }

  // Peek at the top item without removing it
  T peek() {
    if (isEmpty) {
      throw StateError('Stack is empty!');
    }
    return _items.last;
  }

  // Check if the stack is empty
  bool get isEmpty => _items.isEmpty;

  // Get the size of the stack
  int get size => _items.length;
}

void main() {
  // Create a list of integers
  String toCheck1='({[{}]()})';
  String toCheck2='({[]})';
  String toCheck3='{[[({}]})]';
  
  print(checkParenthesesBalance(toCheck1));
  print(checkParenthesesBalance(toCheck2));
  print(checkParenthesesBalance(toCheck3));

}

 bool checkParenthesesBalance(String strToCheck){
      Stack <String> myStack= Stack<String>();
      for(int i=0;i<strToCheck.length;i++){
          String item=strToCheck[i];
          if(item == '(' || item == '{' || item == '[') {
             myStack.push(item); // Push opening parenthesis onto the stack
          }
          else if (item == ')' || item == '}' || item == ']') {
             if (myStack.isEmpty) {
                  return false; // No corresponding opening parenthesis
             }
             String top= myStack.pop();
             if ((item == ')' && top != '(') || (item == '}' && top != '{') || (item == ']' && top != '[')) {
                return false;
             }
        }
  }
  return myStack.isEmpty; //If stack got empty: Balanced. O.w: Not balanced.
}
